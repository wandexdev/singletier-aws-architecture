{
    "Description": "Raji Risikat Yewande / Alt School assignment to deploy 2 servers preinstalled with nginx via Autoscaling in private subnets and balanced on a load balancer",
    "Parameters": {
        "EnvironmentName": {
            "Description": "An environment name that will be prefixed to resource names",
            "Type": "String"
        }
    },
    "Resources": {
        "LBSecGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow http to our load balancer",
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${EnvironmentName}-VPCID"
                    }
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 443,
                        "ToPort": 443,
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "WebServerSecGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow http to our hosts and SSH from local only",
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${EnvironmentName}-VPCID"
                    }
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 0,
                        "ToPort": 65535,
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "WebAppLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash\n# Update repository and install nginx\nsudo apt update -y\nsudo apt upgrade -y\nsudo apt install nginx -y\n#set time and hostname\ntimedatectl set-timzone Africa/Lagos\nhostname=$(hostname)\ndate=$(date)\n# set permission\nsudo chown -R $USER:$USER /var/www\n#redirect to nginx conf\necho "<h1>I'm popularly called $hostname a.k.a the host</h1>" > /var/www/html/index.nginx-debian.html\necho "<h2>Your'e viewing this today: $date</h2>" >> /var/www/html/index.nginx-debian.html\necho "<h2>     Built by Raji Risikat Yewande</h2>" >> /var/www/html/index.nginx-debian.html\n#start nginx\nsudo systemctl restart nginx\nsudo systemctl reload nginx\n"
                    }
                },
                "ImageId": "ami-0b93ce03dcbcb10f6",
                "KeyName": "altkey",
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecGroup"
                    }
                ],
                "InstanceType": "t2.micro",
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sdk",
                        "Ebs": {
                            "VolumeSize": 10
                        }
                    }
                ]
            }
        },
        "WebAppGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${EnvironmentName}-PRIV-NETS"
                        }
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "WebAppLaunchConfig"
                },
                "MinSize": "2",
                "MaxSize": "2",
                "TargetGroupARNs": [
                    {
                        "Ref": "WebAppTargetGroup"
                    }
                ]
            }
        },
        "WebAppLB": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${EnvironmentName}-PUB1-SN"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${EnvironmentName}-PUB2-SN"
                        }
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "LBSecGroup"
                    }
                ]
            }
        },
        "Listener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "WebAppTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "WebAppLB"
                },
                "Port": "80",
                "Protocol": "HTTP"
            }
        },
        "ALBListenerRule": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "Properties": {
                "Actions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "WebAppTargetGroup"
                        }
                    }
                ],
                "Conditions": [
                    {
                        "Field": "path-pattern",
                        "Values": [
                            "/"
                        ]
                    }
                ],
                "ListenerArn": {
                    "Ref": "Listener"
                },
                "Priority": 1
            }
        },
        "WebAppTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 10,
                "HealthCheckPath": "/",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 8,
                "HealthyThresholdCount": 2,
                "Port": 80,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 5,
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${EnvironmentName}-VPCID"
                    }
                }
            }
        }
    }
}
